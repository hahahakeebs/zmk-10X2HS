#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600

#define AS(keycode) &as LS(keycode) keycode

/ {
    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp Q &kp U>;
        };

        ps: ps {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp P &kp S>;
        };
    };

    behaviors {
        td0: tap_dance_parentheseseseses {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <225>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };

        td1: tap_dance_braces {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <225>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        td2: tap_dance_brackets {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <225>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        td3: tap_dance_tabesc {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <225>;
            bindings = <&kp TAB>, <&kp ESC>;
        };

        td4: tap_dance_cx {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <225>;
            bindings = <&kp C>, <&kp X>;
        };

        td5: tap_dance_fg {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <225>;
            bindings = <&kp F>, <&kp G>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <3 4 5 10 11 12 13 16 17 20 21>; // List of keys on the right
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 6 7 8 9 14 15 18 19>; // List of keys on the left
            hold-trigger-on-release;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hw_soft_off: hw_soft_off {
            compatible = "zmk,behavior-soft-off";
            #binding-cells = <0>;
            split-peripheral-off-on-press; // Turn peripheral off immediately for reliability
            hold-time-ms = <1500>; // Only turn off if the key is held for 1.5 seconds or longer.
        };

        fmt: fast_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <125>;
            bindings = <&kp>, <&kp>;

            display-name = "Fast Mod-Tap";
        };

        mt: mod_tap { tapping-term-ms = <200>; };
    };

    combos {
        compatible = "zmk,combos";

        q {
            bindings = <&kp Q>;
            key-positions = <0 1>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <1 2>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <6 7>;
        };

        p {
            bindings = <&kp P>;
            key-positions = <7 8>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <12 13>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <13 14>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <3 4>;
        };

        k {
            bindings = <&kp K>;
            key-positions = <9 10>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <4 5>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <10 11>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <16 17>;
        };

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <8 7 0>;
        };

        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <9 10 5>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 6>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <1 7>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp W  &kp F  &kp G        &kp M          &kp L  &kp U
&kp A  &kp R  &kp S        &kp N          &kp E  &kp I
&kp C  &kp D  &kp T        &kp H          &kp O  &kp Y
              &kp SPACE    &kp BACKSPACE
            >;
        };
    };
};
